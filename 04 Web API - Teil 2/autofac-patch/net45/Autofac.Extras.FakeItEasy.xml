<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Autofac.Extras.FakeItEasy</name>
    </assembly>
    <members>
        <member name="T:Autofac.Extras.FakeItEasy.AutoFake">
            <summary>
            Wrapper around <see cref="N:Autofac"/> and <see cref="N:Autofac.Extras.FakeItEasy"/>
            </summary>
        </member>
        <member name="M:Autofac.Extras.FakeItEasy.AutoFake.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extras.FakeItEasy.AutoFake"/> class.
            </summary>
            <param name="strict">
            <see langword="true"/> to create strict fakes.
            This means that any calls to the fakes that have not been explicitly configured will throw an exception.
            </param>
            <param name="callsBaseMethods">
            <see langword="true"/> to delegate configured method calls to the base method of the faked method.
            </param>
            <param name="callsDoNothing">
            <see langword="true"/> to configure fake calls to do nothing when called.
            </param>
            <param name="onFakeCreated">Specifies an action that should be run over a fake object once it's created.</param>
        </member>
        <member name="M:Autofac.Extras.FakeItEasy.AutoFake.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Autofac.Extras.FakeItEasy.AutoFake"/> class.
            </summary>
        </member>
        <member name="M:Autofac.Extras.FakeItEasy.AutoFake.Dispose">
            <summary>
            Disposes internal container.
            </summary>
        </member>
        <member name="M:Autofac.Extras.FakeItEasy.AutoFake.Dispose(System.Boolean)">
            <summary>
            Handles disposal of managed and unmanaged resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to dispose of managed resources (during a manual execution
            of <see cref="M:Autofac.Extras.FakeItEasy.AutoFake.Dispose"/>); or
            <see langword="false"/> if this is getting run as part of finalization where
            managed resources may have already been cleaned up.
            </param>
        </member>
        <member name="M:Autofac.Extras.FakeItEasy.AutoFake.Create``1(Autofac.Core.Parameter[])">
            <summary>
            Resolve the specified type in the container (register it if needed)
            </summary>
            <typeparam name="T">Service</typeparam>
            <param name="parameters">Optional parameters</param>
            <returns>The service.</returns>
        </member>
        <member name="M:Autofac.Extras.FakeItEasy.AutoFake.Provide``2(Autofac.Core.Parameter[])">
            <summary>
            Resolve the specified type in the container (register it if needed)
            </summary>
            <typeparam name="TService">Service</typeparam>
            <typeparam name="TImplementation">The implementation of the service.</typeparam>
            <param name="parameters">Optional parameters</param>
            <returns>The service.</returns>
        </member>
        <member name="M:Autofac.Extras.FakeItEasy.AutoFake.Provide``1(``0)">
            <summary>
            Resolve the specified type in the container (register specified instance if needed)
            </summary>
            <typeparam name="TService">Service</typeparam>
            <returns>The instance resolved from container.</returns>
        </member>
        <member name="P:Autofac.Extras.FakeItEasy.AutoFake.Container">
            <summary>
            <see cref="T:Autofac.IContainer"/> that handles the component resolution.
            </summary>
        </member>
        <member name="T:Autofac.Extras.FakeItEasy.FakeRegistrationHandler">
            <summary> Resolves unknown interfaces and Fakes. </summary>
        </member>
        <member name="M:Autofac.Extras.FakeItEasy.FakeRegistrationHandler.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Action{System.Object})">
            <summary>
            </summary>
        </member>
        <member name="M:Autofac.Extras.FakeItEasy.FakeRegistrationHandler.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
            <summary>
            Retrieve a registration for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor"></param>
            <returns>
            Registrations for the service.
            </returns>
        </member>
        <member name="M:Autofac.Extras.FakeItEasy.FakeRegistrationHandler.CreateFake(Autofac.Core.TypedService)">
            <summary>
            Creates a fake object.
            </summary>
            <param name="typedService">The typed service.</param>
            <returns></returns>
        </member>
    </members>
</doc>
